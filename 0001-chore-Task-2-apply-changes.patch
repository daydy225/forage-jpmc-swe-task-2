From ac8a6101b1a2becbac75a9432440852db6feb0c2 Mon Sep 17 00:00:00 2001
From: daydy225 <dabelydadi@gmail.com>
Date: Mon, 3 Jun 2024 23:29:50 +0000
Subject: [PATCH] chore: Task 2 apply changes

---
 .gitignore    |  4 ++++
 src/App.css   | 18 ++++++++++++++++
 src/App.tsx   | 52 +++++++++++++++++++++++++++------------------
 src/Graph.tsx | 58 +++++++++++++++++++++++++++++++--------------------
 4 files changed, 89 insertions(+), 43 deletions(-)

diff --git a/.gitignore b/.gitignore
index 4d29575..2c22dfb 100755
--- a/.gitignore
+++ b/.gitignore
@@ -21,3 +21,7 @@
 npm-debug.log*
 yarn-debug.log*
 yarn-error.log*
+
+# pyenv
+/env
+.vscode
diff --git a/src/App.css b/src/App.css
index 1a8747a..fe2c692 100755
--- a/src/App.css
+++ b/src/App.css
@@ -39,6 +39,24 @@
   margin-bottom: 12px;
 }
 
+/* Debug css */
+.debug {
+  width: 100%;
+  border: 2px solid red;
+  border-radius: 5px;
+}
+
+.debug-yellow {
+  width: fit-content;
+  border:2px solid yellow;
+  border-radius: 5px;
+}
+
+.debug-blue {
+  border:2px solid blue;
+  border-radius: 5px;
+}
+
 @keyframes App-logo-spin {
   from {
     transform: rotate(0deg);
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..11899c6 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,13 +1,14 @@
-import React, { Component } from 'react';
-import DataStreamer, { ServerRespond } from './DataStreamer';
-import Graph from './Graph';
-import './App.css';
+import React, { Component } from "react";
+import DataStreamer, { ServerRespond } from "./DataStreamer";
+import Graph from "./Graph";
+import "./App.css";
 
 /**
  * State declaration for <App />
  */
 interface IState {
-  data: ServerRespond[],
+  data: ServerRespond[];
+  showGraph: boolean;
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,28 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return <Graph data={this.state.data} />;
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
@@ -49,25 +61,25 @@ class App extends Component<{}, IState> {
   render() {
     return (
       <div className="App">
-        <header className="App-header">
-          Bank & Merge Co Task 2
-        </header>
+        <header className="App-header">Bank & Merge Co Task 2</header>
         <div className="App-content">
-          <button className="btn btn-primary Stream-button"
+          <button
+            className="btn btn-primary Stream-button"
             // when button is click, our react app tries to request
             // new data from the server.
             // As part of your task, update the getDataFromServer() function
             // to keep requesting the data every 100ms until the app is closed
             // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
+            onClick={() => {
+              this.getDataFromServer();
+            }}
+          >
             Start Streaming Data
           </button>
-          <div className="Graph">
-            {this.renderGraph()}
-          </div>
+          <div className="Graph">{this.renderGraph()}</div>
         </div>
       </div>
-    )
+    );
   }
 }
 
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..5be5225 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,21 +1,21 @@
-import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
-import { ServerRespond } from './DataStreamer';
-import './Graph.css';
+import React, { Component } from "react";
+import { Table } from "@finos/perspective";
+import { ServerRespond } from "./DataStreamer";
+import "./Graph.css";
 
 /**
  * Props declaration for <Graph />
  */
 interface IProps {
-  data: ServerRespond[],
+  data: ServerRespond[];
 }
 
 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
-  load: (table: Table) => void,
+interface PerspectiveViewerElement extends HTMLElement {
+  load: (table: Table) => void;
 }
 
 /**
@@ -27,18 +27,20 @@ class Graph extends Component<IProps, {}> {
   table: Table | undefined;
 
   render() {
-    return React.createElement('perspective-viewer');
+    return React.createElement("perspective-viewer");
   }
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = (document.getElementsByTagName(
+      "perspective-viewer"
+    )[0] as unknown) as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
+      stock: "string",
+      top_ask_price: "float",
+      top_bid_price: "float",
+      timestamp: "date",
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -49,23 +51,33 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute("view", "y_line");
+      elem.setAttribute("column-pivots", '["stock"]');
+      elem.setAttribute("row-pivots", '["timestamp"]');
+      elem.setAttribute("columns", '["top_ask_price"]');
+      elem.setAttribute(
+        "aggregates",
+        `{ "stock": "distinct count", "top_ask_price": "avg", "top_bid_price": "avg", "timestamp": "distinct count" }`
+      );
     }
   }
 
   componentDidUpdate() {
-    // Everytime the data props is updated, insert the data into Perspective table
+    // every time the data props is updated, insert the data into Perspective table
     if (this.table) {
       // As part of the task, you need to fix the way we update the data props to
       // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
+      this.table.update(
+        this.props.data.map((el: any) => {
+          // Format the data from ServerRespond to the schema
+          return {
+            stock: el.stock,
+            top_ask_price: (el.top_ask && el.top_ask.price) || 0,
+            top_bid_price: (el.top_bid && el.top_bid.price) || 0,
+            timestamp: el.timestamp,
+          };
+        })
+      );
     }
   }
 }
-- 
2.36.0.windows.1

